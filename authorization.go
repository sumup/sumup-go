// Code generated by `gogenitor`. DO NOT EDIT.
package sumup

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AuthToken: Authorization token flow
type AuthToken struct {
	// The client ID of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app).
	ClientId string `json:"client_id"`
	// The client secret of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app).
	ClientSecret string `json:"client_secret"`
	// The authorization code that you received from requesting an authorization code.
	Code string `json:"code"`
	// The grant type used for obtaining an access token.
	GrantType AuthTokenGrantType `json:"grant_type"`
	// A **required** parameter when generating a refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// AuthTokenGrantType: The grant type used for obtaining an access token.
type AuthTokenGrantType string

const (
	AuthTokenGrantTypeAuthorizationCode AuthTokenGrantType = "authorization_code"
	AuthTokenGrantTypeRefreshToken      AuthTokenGrantType = "refresh_token"
)

// CreateTokenBody: Authorization token flow
type CreateTokenBody struct {
	// The client ID of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app).
	ClientId string `json:"client_id"`
	// The client secret of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app).
	ClientSecret string `json:"client_secret"`
	// The authorization code that you received from requesting an authorization code.
	Code string `json:"code"`
	// The grant type used for obtaining an access token.
	GrantType CreateTokenBodyGrantType `json:"grant_type"`
	// A **required** parameter when generating a refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// CreateTokenBodyGrantType: The grant type used for obtaining an access token.
type CreateTokenBodyGrantType string

const (
	CreateTokenBodyGrantTypeAuthorizationCode CreateTokenBodyGrantType = "authorization_code"
	CreateTokenBodyGrantTypeRefreshToken      CreateTokenBodyGrantType = "refresh_token"
)

// AuthorizeParams: query parameters for Authorize
type AuthorizeParams struct {
	// The client ID of your application that was generated when you [registered it](https://developer.sumup.com/docs/register-app/).
	ClientId *string
	// The URI to which the merchant user is redirected after authorizing your application to access their user's profile
	// data and to which the authorization code is sent. The value must match exactly one of the [registered URIs](https://developer.sumup.com/docs/register-app#3-create-oauth-client-credentials)
	// for your application.
	RedirectUri *string
	// The type of the expected response. The value must be `code` to indicate that you expect to receive an authorization
	// code.
	ResponseType *string
	// A space-separated list of scopes for which you request authorization. If you don't specify any scopes in
	// the request, your application will be granted authorization for the default scopes.
	Scope *string
	// A unique local state that can be used for correlating requests and responses and for preventing [cross-site request
	// forgery](https://tools.ietf.org/html/rfc6749#section-10.12).
	State *string
}

// QueryValues converts [AuthorizeParams] into [url.Values].
func (p *AuthorizeParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.ClientId != nil {
		q.Set("client_id", *p.ClientId)
	}

	if p.RedirectUri != nil {
		q.Set("redirect_uri", *p.RedirectUri)
	}

	if p.ResponseType != nil {
		q.Set("response_type", *p.ResponseType)
	}

	if p.Scope != nil {
		q.Set("scope", *p.Scope)
	}

	if p.State != nil {
		q.Set("state", *p.State)
	}

	return q
}

// CreateToken200Response is a schema definition.
type CreateToken200Response struct {
	// The access token that you need to use in your requests to the SumUp API.
	AccessToken *string `json:"access_token,omitempty"`
	// The validity of the access token in seconds.
	ExpiresIn *int `json:"expires_in,omitempty"`
	// The refresh token provided in the request call
	RefreshToken *string `json:"refresh_token,omitempty"`
	// List of authorization scopes granted to your access token.
	Scope *string `json:"scope,omitempty"`
	// The type of the token. The value is always `Bearer`.
	TokenType *string `json:"token_type,omitempty"`
}

// Authorize200Response is a schema definition.
type Authorize200Response struct {
}

type AuthorizationService service

// CreateToken: Generate a token
// Generate a token or a refresh token
func (s *AuthorizationService) CreateToken(ctx context.Context, body CreateTokenBody) (*CreateToken200Response, error) {
	buf := new(bytes.Buffer)
	if err := json.NewEncoder(buf).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	path := fmt.Sprintf("/token")

	req, err := s.client.NewRequest(ctx, http.MethodPost, path, buf)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v CreateToken200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusBadRequest:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Authorize: Request authorization from users
// Request authorization from users and grant your application access to resources associated with the user's profile.
func (s *AuthorizationService) Authorize(ctx context.Context, params AuthorizeParams) (*Authorize200Response, error) {
	path := fmt.Sprintf("/authorize")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	req.URL.RawQuery = params.QueryValues().Encode()

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v Authorize200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}
