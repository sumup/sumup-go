// Code generated by `go-sdk-gen`. DO NOT EDIT.

package receipts

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"time"

	"github.com/sumup/sumup-go/client"
	"github.com/sumup/sumup-go/shared"
)

// Receipt is a schema definition.
type Receipt struct {
	AcquirerData *ReceiptAcquirerData `json:"acquirer_data,omitempty"`
	EmvData      *ReceiptEmvData      `json:"emv_data,omitempty"`
	// Receipt merchant data
	MerchantData *ReceiptMerchantData `json:"merchant_data,omitempty"`
	// Transaction information.
	TransactionData *ReceiptTransaction `json:"transaction_data,omitempty"`
}

// ReceiptAcquirerData is a schema definition.
type ReceiptAcquirerData struct {
	AuthorizationCode *string `json:"authorization_code,omitempty"`
	LocalTime         *string `json:"local_time,omitempty"`
	ReturnCode        *string `json:"return_code,omitempty"`
	Tid               *string `json:"tid,omitempty"`
}

// ReceiptEmvData is a schema definition.
type ReceiptEmvData struct {
}

// ReceiptCard is a schema definition.
type ReceiptCard struct {
	// Card last 4 digits.
	Last4Digits *string `json:"last_4_digits,omitempty"`
	// Card Scheme.
	Type *string `json:"type,omitempty"`
}

// ReceiptEvent is a schema definition.
type ReceiptEvent struct {
	// Amount of the event.
	Amount *shared.AmountEvent `json:"amount,omitempty"`
	// Unique ID of the transaction event.
	// Format: int64
	Id        *shared.EventId `json:"id,omitempty"`
	ReceiptNo *string         `json:"receipt_no,omitempty"`
	// Status of the transaction event.
	Status *shared.EventStatus `json:"status,omitempty"`
	// Date and time of the transaction event.
	Timestamp *shared.TimestampEvent `json:"timestamp,omitempty"`
	// Unique ID of the transaction.
	TransactionId *shared.TransactionId `json:"transaction_id,omitempty"`
	// Type of the transaction event.
	Type *shared.EventType `json:"type,omitempty"`
}

// ReceiptMerchantData: Receipt merchant data
type ReceiptMerchantData struct {
	Locale          *string                             `json:"locale,omitempty"`
	MerchantProfile *ReceiptMerchantDataMerchantProfile `json:"merchant_profile,omitempty"`
}

// ReceiptMerchantDataMerchantProfile is a schema definition.
type ReceiptMerchantDataMerchantProfile struct {
	Address      *ReceiptMerchantDataMerchantProfileAddress `json:"address,omitempty"`
	BusinessName *string                                    `json:"business_name,omitempty"`
	Email        *string                                    `json:"email,omitempty"`
	MerchantCode *string                                    `json:"merchant_code,omitempty"`
}

// ReceiptMerchantDataMerchantProfileAddress is a schema definition.
type ReceiptMerchantDataMerchantProfileAddress struct {
	AddressLine1      *string `json:"address_line_1,omitempty"`
	City              *string `json:"city,omitempty"`
	Country           *string `json:"country,omitempty"`
	CountryEnName     *string `json:"country_en_name,omitempty"`
	CountryNativeName *string `json:"country_native_name,omitempty"`
	Landline          *string `json:"landline,omitempty"`
	PostCode          *string `json:"post_code,omitempty"`
}

// ReceiptTransaction: Transaction information.
type ReceiptTransaction struct {
	// Transaction amount.
	Amount *string      `json:"amount,omitempty"`
	Card   *ReceiptCard `json:"card,omitempty"`
	// Transaction currency.
	Currency *string `json:"currency,omitempty"`
	// Transaction entry mode.
	EntryMode *string `json:"entry_mode,omitempty"`
	// Events
	Events *[]ReceiptEvent `json:"events,omitempty"`
	// Number of installments.
	InstallmentsCount *int `json:"installments_count,omitempty"`
	// Transaction type.
	PaymentType *string `json:"payment_type,omitempty"`
	// Products
	Products *[]ReceiptTransactionProduct `json:"products,omitempty"`
	// Receipt number
	ReceiptNo *string `json:"receipt_no,omitempty"`
	// Transaction processing status.
	Status *string `json:"status,omitempty"`
	// Time created at.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Tip amount (included in transaction amount).
	TipAmount *string `json:"tip_amount,omitempty"`
	// Transaction code.
	TransactionCode *string `json:"transaction_code,omitempty"`
	// Transaction VAT amount.
	VatAmount *string `json:"vat_amount,omitempty"`
	// Vat rates.
	VatRates *[]ReceiptTransactionVatRate `json:"vat_rates,omitempty"`
	// Cardholder verification method.
	VerificationMethod *string `json:"verification_method,omitempty"`
}

// ReceiptTransactionProduct is a schema definition.
type ReceiptTransactionProduct struct {
	// Product description.
	Description *string `json:"description,omitempty"`
	// Product name.
	Name *string `json:"name,omitempty"`
	// Product price.
	Price *float64 `json:"price,omitempty"`
	// Product quantity.
	Quantity *int `json:"quantity,omitempty"`
	// Quantity x product price.
	TotalPrice *float64 `json:"total_price,omitempty"`
}

// ReceiptTransactionVatRate is a schema definition.
type ReceiptTransactionVatRate struct {
	// Gross
	Gross *float64 `json:"gross,omitempty"`
	// Net
	Net *float64 `json:"net,omitempty"`
	// Rate
	Rate *float64 `json:"rate,omitempty"`
	// Vat
	Vat *float64 `json:"vat,omitempty"`
}

// GetReceiptParams: query parameters for GetReceipt
type GetReceiptParams struct {
	// Merchant code.
	Mid string
	// The ID of the transaction event (refund).
	TxEventId *int
}

// QueryValues converts [GetReceiptParams] into [url.Values].
func (p *GetReceiptParams) QueryValues() url.Values {
	q := make(url.Values)

	q.Set("mid", p.Mid)

	if p.TxEventId != nil {
		q.Set("tx_event_id", strconv.Itoa(*p.TxEventId))
	}

	return q
}

type ReceiptsService struct {
	c *client.Client
}

func NewReceiptsService(c *client.Client) *ReceiptsService {
	return &ReceiptsService{c: c}
}

// Get: Retrieve receipt details
// Retrieves receipt specific data for a transaction.
func (s *ReceiptsService) Get(ctx context.Context, id string, params GetReceiptParams) (*Receipt, error) {
	path := fmt.Sprintf("/v1.1/receipts/%v", id)

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v Receipt
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusBadRequest:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusUnauthorized:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}
