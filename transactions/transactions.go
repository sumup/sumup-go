// Code generated by `go-sdk-gen`. DO NOT EDIT.

package transactions

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"time"

	"github.com/sumup/sumup-go/client"
	"github.com/sumup/sumup-go/shared"
)

// CardResponse: Details of the payment card.
type CardResponse struct {
	// Last 4 digits of the payment card number.
	// Read only
	// Min length: 4
	// Max length: 4
	Last4Digits *string `json:"last_4_digits,omitempty"`
	// Issuing card network of the payment card.
	// Read only
	Type *CardResponseType `json:"type,omitempty"`
}

// CardResponseType: Issuing card network of the payment card.
// Read only
type CardResponseType string

const (
	CardResponseTypeAmex         CardResponseType = "AMEX"
	CardResponseTypeCup          CardResponseType = "CUP"
	CardResponseTypeDiners       CardResponseType = "DINERS"
	CardResponseTypeDiscover     CardResponseType = "DISCOVER"
	CardResponseTypeElo          CardResponseType = "ELO"
	CardResponseTypeElv          CardResponseType = "ELV"
	CardResponseTypeHipercard    CardResponseType = "HIPERCARD"
	CardResponseTypeJcb          CardResponseType = "JCB"
	CardResponseTypeMaestro      CardResponseType = "MAESTRO"
	CardResponseTypeMastercard   CardResponseType = "MASTERCARD"
	CardResponseTypeUnknown      CardResponseType = "UNKNOWN"
	CardResponseTypeVisa         CardResponseType = "VISA"
	CardResponseTypeVisaElectron CardResponseType = "VISA_ELECTRON"
	CardResponseTypeVisaVpay     CardResponseType = "VISA_VPAY"
)

// Event is a schema definition.
type Event struct {
	// Amount of the event.
	Amount *shared.AmountEvent `json:"amount,omitempty"`
	// Amount deducted for the event.
	DeductedAmount *float64 `json:"deducted_amount,omitempty"`
	// Amount of the fee deducted for the event.
	DeductedFeeAmount *float64 `json:"deducted_fee_amount,omitempty"`
	// Amount of the fee related to the event.
	FeeAmount *float64 `json:"fee_amount,omitempty"`
	// Unique ID of the transaction event.
	// Format: int64
	Id *shared.EventId `json:"id,omitempty"`
	// Consecutive number of the installment.
	InstallmentNumber *int `json:"installment_number,omitempty"`
	// Status of the transaction event.
	Status *shared.EventStatus `json:"status,omitempty"`
	// Date and time of the transaction event.
	Timestamp *shared.TimestampEvent `json:"timestamp,omitempty"`
	// Unique ID of the transaction.
	TransactionId *shared.TransactionId `json:"transaction_id,omitempty"`
	// Type of the transaction event.
	Type *shared.EventType `json:"type,omitempty"`
}

// HorizontalAccuracy: Indication of the precision of the geographical position received from the payment terminal.
type HorizontalAccuracy float64

// Lat: Latitude value from the coordinates of the payment location (as received from the payment terminal reader).
//
// Min: 0
// Max: 90
type Lat float64

// Link: Details of a link to a related resource.
type Link struct {
	// URL for accessing the related resource.
	// Format: uri
	Href *string `json:"href,omitempty"`
	// Specifies the relation to the current resource.
	Rel *string `json:"rel,omitempty"`
	// Specifies the media type of the related resource.
	Type *string `json:"type,omitempty"`
}

// LinkRefund is a schema definition.
type LinkRefund struct {
	// URL for accessing the related resource.
	// Format: uri
	Href *string `json:"href,omitempty"`
	// Maximum allowed amount for the refund.
	MaxAmount *float64 `json:"max_amount,omitempty"`
	// Minimum allowed amount for the refund.
	MinAmount *float64 `json:"min_amount,omitempty"`
	// Specifies the relation to the current resource.
	Rel *string `json:"rel,omitempty"`
	// Specifies the media type of the related resource.
	Type *string `json:"type,omitempty"`
}

// Lon: Longitude value from the coordinates of the payment location (as received from the payment terminal reader).
//
// Min: 0
// Max: 180
type Lon float64

// Product: Details of the product for which the payment is made.
type Product struct {
	// Name of the product from the merchant's catalog.
	Name *string `json:"name,omitempty"`
	// Price of the product without VAT.
	Price *float64 `json:"price,omitempty"`
	// Price of a single product item with VAT.
	PriceWithVat *float64 `json:"price_with_vat,omitempty"`
	// Number of product items for the purchase.
	Quantity *float64 `json:"quantity,omitempty"`
	// Amount of the VAT for a single product item (calculated as the product of `price` and `vat_rate`, i.e. `single_vat_amount
	// = price * vat_rate`).
	SingleVatAmount *float64 `json:"single_vat_amount,omitempty"`
	// Total price of the product items without VAT (calculated as the product of `price` and `quantity`, i.e. `total_price
	// = price * quantity`).
	TotalPrice *float64 `json:"total_price,omitempty"`
	// Total price of the product items including VAT (calculated as the product of `price_with_vat` and `quantity`, i.e.
	// `total_with_vat = price_with_vat * quantity`).
	TotalWithVat *float64 `json:"total_with_vat,omitempty"`
	// Total VAT amount for the purchase (calculated as the product of `single_vat_amount` and `quantity`, i.e. `vat_amount
	// = single_vat_amount * quantity`).
	VatAmount *float64 `json:"vat_amount,omitempty"`
	// VAT rate applicable to the product.
	VatRate *float64 `json:"vat_rate,omitempty"`
}

// TransactionEvent: Details of a transaction event.
type TransactionEvent struct {
	// Amount of the event.
	Amount *shared.AmountEvent `json:"amount,omitempty"`
	// Date when the transaction event occurred.
	// Format: date
	Date *shared.Date `json:"date,omitempty"`
	// Date when the transaction event is due to occur.
	// Format: date
	DueDate *shared.Date `json:"due_date,omitempty"`
	// Type of the transaction event.
	EventType *shared.EventType `json:"event_type,omitempty"`
	// Unique ID of the transaction event.
	// Format: int64
	Id *shared.EventId `json:"id,omitempty"`
	// Consecutive number of the installment that is paid. Applicable only payout events, i.e. `event_type = PAYOUT`.
	InstallmentNumber *int `json:"installment_number,omitempty"`
	// Status of the transaction event.
	Status *shared.EventStatus `json:"status,omitempty"`
	// Date and time of the transaction event.
	Timestamp *shared.TimestampEvent `json:"timestamp,omitempty"`
}

// TransactionFull is a schema definition.
type TransactionFull struct {
	// Total amount of the transaction.
	Amount *float64 `json:"amount,omitempty"`
	// Authorization code for the transaction sent by the payment card issuer or bank. Applicable only to card payments.
	AuthCode *string `json:"auth_code,omitempty"`
	// Details of the payment card.
	Card *CardResponse `json:"card,omitempty"`
	// Three-letter [ISO4217](https://en.wikipedia.org/wiki/ISO_4217) code of the currency for the amount. Currently supported
	// currency values are enumerated above.
	Currency *shared.Currency `json:"currency,omitempty"`
	// Entry mode of the payment details.
	EntryMode *TransactionFullEntryMode `json:"entry_mode,omitempty"`
	// List of events related to the transaction.
	// Unique items only
	Events *[]Event `json:"events,omitempty"`
	// Indication of the precision of the geographical position received from the payment terminal.
	HorizontalAccuracy *HorizontalAccuracy `json:"horizontal_accuracy,omitempty"`
	// Unique ID of the transaction.
	Id *string `json:"id,omitempty"`
	// Current number of the installment for deferred payments.
	// Min: 1
	InstallmentsCount *int `json:"installments_count,omitempty"`
	// Internal unique ID of the transaction on the SumUp platform.
	InternalId *int `json:"internal_id,omitempty"`
	// Latitude value from the coordinates of the payment location (as received from the payment terminal reader).
	// Min: 0
	// Max: 90
	Lat *Lat `json:"lat,omitempty"`
	// List of hyperlinks for accessing related resources.
	// Unique items only
	Links *[]interface{} `json:"links,omitempty"`
	// Local date and time of the creation of the transaction.
	LocalTime *time.Time `json:"local_time,omitempty"`
	// Details of the payment location as received from the payment terminal.
	Location *TransactionFullLocation `json:"location,omitempty"`
	// Longitude value from the coordinates of the payment location (as received from the payment terminal reader).
	// Min: 0
	// Max: 180
	Lon *Lon `json:"lon,omitempty"`
	// Unique code of the registered merchant to whom the payment is made.
	MerchantCode *string `json:"merchant_code,omitempty"`
	// Payment type used for the transaction.
	PaymentType *TransactionFullPaymentType `json:"payment_type,omitempty"`
	// Payout plan of the registered user at the time when the transaction was made.
	PayoutPlan *TransactionFullPayoutPlan `json:"payout_plan,omitempty"`
	// Payout type for the transaction.
	PayoutType *TransactionFullPayoutType `json:"payout_type,omitempty"`
	// Number of payouts that are made to the registered user specified in the `user` property.
	PayoutsReceived *int `json:"payouts_received,omitempty"`
	// Total number of payouts to the registered user specified in the `user` property.
	PayoutsTotal *int `json:"payouts_total,omitempty"`
	// Short description of the payment. The value is taken from the `description` property of the related checkout resource.
	ProductSummary *string `json:"product_summary,omitempty"`
	// List of products from the merchant's catalogue for which the transaction serves as a payment.
	Products *[]Product `json:"products,omitempty"`
	// Simple name of the payment type.
	SimplePaymentType *TransactionFullSimplePaymentType `json:"simple_payment_type,omitempty"`
	// Status generated from the processing status and the latest transaction state.
	SimpleStatus *TransactionFullSimpleStatus `json:"simple_status,omitempty"`
	// Current status of the transaction.
	Status *TransactionFullStatus `json:"status,omitempty"`
	// Indicates whether tax deduction is enabled for the transaction.
	TaxEnabled *bool `json:"tax_enabled,omitempty"`
	// Date and time of the creation of the transaction. Response format expressed according to [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) code.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Amount of the tip (out of the total transaction amount).
	TipAmount *float64 `json:"tip_amount,omitempty"`
	// Transaction code returned by the acquirer/processing entity after processing the transaction.
	TransactionCode *string `json:"transaction_code,omitempty"`
	// List of transaction events related to the transaction.
	TransactionEvents *[]TransactionEvent `json:"transaction_events,omitempty"`
	// Email address of the registered user (merchant) to whom the payment is made.
	// Format: email
	Username *string `json:"username,omitempty"`
	// Amount of the applicable VAT (out of the total transaction amount).
	VatAmount *float64 `json:"vat_amount,omitempty"`
	// List of VAT rates applicable to the transaction.
	VatRates *[]interface{} `json:"vat_rates,omitempty"`
	// Verification method used for the transaction.
	VerificationMethod *TransactionFullVerificationMethod `json:"verification_method,omitempty"`
}

// TransactionFullPaymentType: Payment type used for the transaction.
type TransactionFullPaymentType string

const (
	TransactionFullPaymentTypeBoleto    TransactionFullPaymentType = "BOLETO"
	TransactionFullPaymentTypeEcom      TransactionFullPaymentType = "ECOM"
	TransactionFullPaymentTypeRecurring TransactionFullPaymentType = "RECURRING"
)

// TransactionFullStatus: Current status of the transaction.
type TransactionFullStatus string

const (
	TransactionFullStatusCancelled  TransactionFullStatus = "CANCELLED"
	TransactionFullStatusFailed     TransactionFullStatus = "FAILED"
	TransactionFullStatusPending    TransactionFullStatus = "PENDING"
	TransactionFullStatusSuccessful TransactionFullStatus = "SUCCESSFUL"
)

// TransactionFullEntryMode: Entry mode of the payment details.
type TransactionFullEntryMode string

const (
	TransactionFullEntryModeBoleto        TransactionFullEntryMode = "BOLETO"
	TransactionFullEntryModeCustomerEntry TransactionFullEntryMode = "CUSTOMER_ENTRY"
)

// TransactionFullPayoutPlan: Payout plan of the registered user at the time when the transaction was made.
type TransactionFullPayoutPlan string

const (
	TransactionFullPayoutPlanAcceleratedInstallment TransactionFullPayoutPlan = "ACCELERATED_INSTALLMENT"
	TransactionFullPayoutPlanSinglePayment          TransactionFullPayoutPlan = "SINGLE_PAYMENT"
	TransactionFullPayoutPlanTrueInstallment        TransactionFullPayoutPlan = "TRUE_INSTALLMENT"
)

// TransactionFullLocation: Details of the payment location as received from the payment terminal.
type TransactionFullLocation struct {
	// Indication of the precision of the geographical position received from the payment terminal.
	HorizontalAccuracy *HorizontalAccuracy `json:"horizontal_accuracy,omitempty"`
	// Latitude value from the coordinates of the payment location (as received from the payment terminal reader).
	// Min: 0
	// Max: 90
	Lat *Lat `json:"lat,omitempty"`
	// Longitude value from the coordinates of the payment location (as received from the payment terminal reader).
	// Min: 0
	// Max: 180
	Lon *Lon `json:"lon,omitempty"`
}

// TransactionFullPayoutType: Payout type for the transaction.
type TransactionFullPayoutType string

const (
	TransactionFullPayoutTypeBalance     TransactionFullPayoutType = "BALANCE"
	TransactionFullPayoutTypeBankAccount TransactionFullPayoutType = "BANK_ACCOUNT"
	TransactionFullPayoutTypePrepaidCard TransactionFullPayoutType = "PREPAID_CARD"
)

// TransactionFullSimplePaymentType: Simple name of the payment type.
type TransactionFullSimplePaymentType string

const (
	TransactionFullSimplePaymentTypeCash              TransactionFullSimplePaymentType = "CASH"
	TransactionFullSimplePaymentTypeCcCustomerEntered TransactionFullSimplePaymentType = "CC_CUSTOMER_ENTERED"
	TransactionFullSimplePaymentTypeCcSignature       TransactionFullSimplePaymentType = "CC_SIGNATURE"
	TransactionFullSimplePaymentTypeElv               TransactionFullSimplePaymentType = "ELV"
	TransactionFullSimplePaymentTypeEmv               TransactionFullSimplePaymentType = "EMV"
	TransactionFullSimplePaymentTypeManualEntry       TransactionFullSimplePaymentType = "MANUAL_ENTRY"
	TransactionFullSimplePaymentTypeMoto              TransactionFullSimplePaymentType = "MOTO"
)

// TransactionFullSimpleStatus: Status generated from the processing status and the latest transaction state.
type TransactionFullSimpleStatus string

const (
	TransactionFullSimpleStatusCancelFailed  TransactionFullSimpleStatus = "CANCEL_FAILED"
	TransactionFullSimpleStatusCancelled     TransactionFullSimpleStatus = "CANCELLED"
	TransactionFullSimpleStatusChargeback    TransactionFullSimpleStatus = "CHARGEBACK"
	TransactionFullSimpleStatusFailed        TransactionFullSimpleStatus = "FAILED"
	TransactionFullSimpleStatusNonCollection TransactionFullSimpleStatus = "NON_COLLECTION"
	TransactionFullSimpleStatusPaidOut       TransactionFullSimpleStatus = "PAID_OUT"
	TransactionFullSimpleStatusRefundFailed  TransactionFullSimpleStatus = "REFUND_FAILED"
	TransactionFullSimpleStatusRefunded      TransactionFullSimpleStatus = "REFUNDED"
	TransactionFullSimpleStatusSuccessful    TransactionFullSimpleStatus = "SUCCESSFUL"
)

// TransactionFullVerificationMethod: Verification method used for the transaction.
type TransactionFullVerificationMethod string

const (
	TransactionFullVerificationMethodConfirmationCodeVerified TransactionFullVerificationMethod = "confirmation code verified"
	TransactionFullVerificationMethodNone                     TransactionFullVerificationMethod = "none"
	TransactionFullVerificationMethodOfflinePin               TransactionFullVerificationMethod = "offline pin"
	TransactionFullVerificationMethodOfflinePinSignature      TransactionFullVerificationMethod = "offline pin + signature"
	TransactionFullVerificationMethodOnlinePin                TransactionFullVerificationMethod = "online pin"
	TransactionFullVerificationMethodSignature                TransactionFullVerificationMethod = "signature"
)

// TransactionHistory is a schema definition.
type TransactionHistory struct {
	// Total amount of the transaction.
	Amount *float64 `json:"amount,omitempty"`
	// Issuing card network of the payment card used for the transaction.
	CardType *TransactionHistoryCardType `json:"card_type,omitempty"`
	// Client-specific ID of the transaction.
	ClientTransactionId *string `json:"client_transaction_id,omitempty"`
	// Three-letter [ISO4217](https://en.wikipedia.org/wiki/ISO_4217) code of the currency for the amount. Currently supported
	// currency values are enumerated above.
	Currency *shared.Currency `json:"currency,omitempty"`
	// Unique ID of the transaction.
	Id *string `json:"id,omitempty"`
	// Current number of the installment for deferred payments.
	// Min: 1
	InstallmentsCount *int `json:"installments_count,omitempty"`
	// Payment type used for the transaction.
	PaymentType *TransactionHistoryPaymentType `json:"payment_type,omitempty"`
	// Payout plan of the registered user at the time when the transaction was made.
	PayoutPlan *TransactionHistoryPayoutPlan `json:"payout_plan,omitempty"`
	// Number of payouts that are made to the registered user specified in the `user` property.
	PayoutsReceived *int `json:"payouts_received,omitempty"`
	// Total number of payouts to the registered user specified in the `user` property.
	PayoutsTotal *int `json:"payouts_total,omitempty"`
	// Short description of the payment. The value is taken from the `description` property of the related checkout resource.
	ProductSummary *string `json:"product_summary,omitempty"`
	// Current status of the transaction.
	Status *TransactionHistoryStatus `json:"status,omitempty"`
	// Date and time of the creation of the transaction. Response format expressed according to [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) code.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Transaction code returned by the acquirer/processing entity after processing the transaction.
	TransactionCode *string `json:"transaction_code,omitempty"`
	// Unique ID of the transaction.
	TransactionId *shared.TransactionId `json:"transaction_id,omitempty"`
	// Type of the transaction for the registered user specified in the `user` property.
	Type *TransactionHistoryType `json:"type,omitempty"`
	// Email address of the registered user (merchant) to whom the payment is made.
	// Format: email
	User *string `json:"user,omitempty"`
}

// TransactionHistoryPaymentType: Payment type used for the transaction.
type TransactionHistoryPaymentType string

const (
	TransactionHistoryPaymentTypeBoleto    TransactionHistoryPaymentType = "BOLETO"
	TransactionHistoryPaymentTypeEcom      TransactionHistoryPaymentType = "ECOM"
	TransactionHistoryPaymentTypeRecurring TransactionHistoryPaymentType = "RECURRING"
)

// TransactionHistoryStatus: Current status of the transaction.
type TransactionHistoryStatus string

const (
	TransactionHistoryStatusCancelled  TransactionHistoryStatus = "CANCELLED"
	TransactionHistoryStatusFailed     TransactionHistoryStatus = "FAILED"
	TransactionHistoryStatusPending    TransactionHistoryStatus = "PENDING"
	TransactionHistoryStatusSuccessful TransactionHistoryStatus = "SUCCESSFUL"
)

// TransactionHistoryPayoutPlan: Payout plan of the registered user at the time when the transaction was made.
type TransactionHistoryPayoutPlan string

const (
	TransactionHistoryPayoutPlanAcceleratedInstallment TransactionHistoryPayoutPlan = "ACCELERATED_INSTALLMENT"
	TransactionHistoryPayoutPlanSinglePayment          TransactionHistoryPayoutPlan = "SINGLE_PAYMENT"
	TransactionHistoryPayoutPlanTrueInstallment        TransactionHistoryPayoutPlan = "TRUE_INSTALLMENT"
)

// TransactionHistoryCardType: Issuing card network of the payment card used for the transaction.
type TransactionHistoryCardType string

const (
	TransactionHistoryCardTypeAmex         TransactionHistoryCardType = "AMEX"
	TransactionHistoryCardTypeCup          TransactionHistoryCardType = "CUP"
	TransactionHistoryCardTypeDiners       TransactionHistoryCardType = "DINERS"
	TransactionHistoryCardTypeDiscover     TransactionHistoryCardType = "DISCOVER"
	TransactionHistoryCardTypeElo          TransactionHistoryCardType = "ELO"
	TransactionHistoryCardTypeElv          TransactionHistoryCardType = "ELV"
	TransactionHistoryCardTypeHipercard    TransactionHistoryCardType = "HIPERCARD"
	TransactionHistoryCardTypeJcb          TransactionHistoryCardType = "JCB"
	TransactionHistoryCardTypeMaestro      TransactionHistoryCardType = "MAESTRO"
	TransactionHistoryCardTypeMastercard   TransactionHistoryCardType = "MASTERCARD"
	TransactionHistoryCardTypeUnknown      TransactionHistoryCardType = "UNKNOWN"
	TransactionHistoryCardTypeVisa         TransactionHistoryCardType = "VISA"
	TransactionHistoryCardTypeVisaElectron TransactionHistoryCardType = "VISA_ELECTRON"
	TransactionHistoryCardTypeVisaVpay     TransactionHistoryCardType = "VISA_VPAY"
)

// TransactionHistoryType: Type of the transaction for the registered user specified in the `user` property.
type TransactionHistoryType string

const (
	TransactionHistoryTypeChargeBack TransactionHistoryType = "CHARGE_BACK"
	TransactionHistoryTypePayment    TransactionHistoryType = "PAYMENT"
	TransactionHistoryTypeRefund     TransactionHistoryType = "REFUND"
)

// TransactionMixinHistory is a schema definition.
type TransactionMixinHistory struct {
	// Payout plan of the registered user at the time when the transaction was made.
	PayoutPlan *TransactionMixinHistoryPayoutPlan `json:"payout_plan,omitempty"`
	// Number of payouts that are made to the registered user specified in the `user` property.
	PayoutsReceived *int `json:"payouts_received,omitempty"`
	// Total number of payouts to the registered user specified in the `user` property.
	PayoutsTotal *int `json:"payouts_total,omitempty"`
	// Short description of the payment. The value is taken from the `description` property of the related checkout resource.
	ProductSummary *string `json:"product_summary,omitempty"`
}

// TransactionMixinHistoryPayoutPlan: Payout plan of the registered user at the time when the transaction was
// made.
type TransactionMixinHistoryPayoutPlan string

const (
	TransactionMixinHistoryPayoutPlanAcceleratedInstallment TransactionMixinHistoryPayoutPlan = "ACCELERATED_INSTALLMENT"
	TransactionMixinHistoryPayoutPlanSinglePayment          TransactionMixinHistoryPayoutPlan = "SINGLE_PAYMENT"
	TransactionMixinHistoryPayoutPlanTrueInstallment        TransactionMixinHistoryPayoutPlan = "TRUE_INSTALLMENT"
)

// RefundTransactionBody: Optional amount for partial refunds of transactions.
type RefundTransactionBody struct {
	// Amount to be refunded. Eligible amount can't exceed the amount of the transaction and varies based on country
	// and currency. If you do not specify a value, the system performs a full refund of the transaction.
	Amount *float64 `json:"amount,omitempty"`
}

// ListTransactionsParams: query parameters for ListTransactions
type ListTransactionsParams struct {
	// Filters the results by the latest modification time of resources and returns only transactions that are modified
	// *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	ChangesSince *time.Time
	// Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will
	// return 10 results.
	Limit *int
	// Filters the results by the reference ID of transaction events and returns only transactions with events whose
	// IDs are *smaller* than the specified value. This parameters supersedes the `newest_time` parameter (if both
	// are provided in the request).
	NewestRef *string
	// Filters the results by the creation time of resources and returns only transactions that are created *before*
	// the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	NewestTime *time.Time
	// Filters the results by the reference ID of transaction events and returns only transactions with events whose
	// IDs are *greater* than the specified value. This parameters supersedes the `oldest_time` parameter (if both
	// are provided in the request).
	OldestRef *string
	// Filters the results by the creation time of resources and returns only transactions that are created *at
	// or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	OldestTime *time.Time
	// Specifies the order in which the returned results are displayed.
	Order *string
	// Filters the returned results by the specified list of payment types used for the transactions.
	PaymentTypes *[]string
	// Filters the returned results by the specified list of final statuses of the transactions.
	Statuses *[]string
	// Retrieves the transaction resource with the specified transaction code.
	TransactionCode *string
	// Filters the returned results by the specified list of transaction types.
	Types *[]string
	// Filters the returned results by user email.
	Users *[]string
}

// QueryValues converts [ListTransactionsParams] into [url.Values].
func (p *ListTransactionsParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.ChangesSince != nil {
		q.Set("changes_since", p.ChangesSince.Format(time.RFC3339))
	}

	if p.Limit != nil {
		q.Set("limit", strconv.Itoa(*p.Limit))
	}

	if p.NewestRef != nil {
		q.Set("newest_ref", *p.NewestRef)
	}

	if p.NewestTime != nil {
		q.Set("newest_time", p.NewestTime.Format(time.RFC3339))
	}

	if p.OldestRef != nil {
		q.Set("oldest_ref", *p.OldestRef)
	}

	if p.OldestTime != nil {
		q.Set("oldest_time", p.OldestTime.Format(time.RFC3339))
	}

	if p.Order != nil {
		q.Set("order", *p.Order)
	}

	if p.PaymentTypes != nil {
		for _, v := range *p.PaymentTypes {
			q.Add("payment_types", v)
		}
	}

	if p.Statuses != nil {
		for _, v := range *p.Statuses {
			q.Add("statuses", v)
		}
	}

	if p.TransactionCode != nil {
		q.Set("transaction_code", *p.TransactionCode)
	}

	if p.Types != nil {
		for _, v := range *p.Types {
			q.Add("types", v)
		}
	}

	if p.Users != nil {
		for _, v := range *p.Users {
			q.Add("users", v)
		}
	}

	return q
}

// GetTransactionParams: query parameters for GetTransaction
type GetTransactionParams struct {
	// Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).
	Id *string
	// Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter in
	// the transaction resource).
	InternalId *string
	// Retrieves the transaction resource with the specified transaction code.
	TransactionCode *string
}

// QueryValues converts [GetTransactionParams] into [url.Values].
func (p *GetTransactionParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Id != nil {
		q.Set("id", *p.Id)
	}

	if p.InternalId != nil {
		q.Set("internal_id", *p.InternalId)
	}

	if p.TransactionCode != nil {
		q.Set("transaction_code", *p.TransactionCode)
	}

	return q
}

// ListTransactionsV21Params: query parameters for ListTransactionsV2.1
type ListTransactionsV21Params struct {
	// Filters the results by the latest modification time of resources and returns only transactions that are modified
	// *at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	ChangesSince *time.Time
	// Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will
	// return 10 results.
	Limit *int
	// Filters the results by the reference ID of transaction events and returns only transactions with events whose
	// IDs are *smaller* than the specified value. This parameters supersedes the `newest_time` parameter (if both
	// are provided in the request).
	NewestRef *string
	// Filters the results by the creation time of resources and returns only transactions that are created *before*
	// the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	NewestTime *time.Time
	// Filters the results by the reference ID of transaction events and returns only transactions with events whose
	// IDs are *greater* than the specified value. This parameters supersedes the `oldest_time` parameter (if both
	// are provided in the request).
	OldestRef *string
	// Filters the results by the creation time of resources and returns only transactions that are created *at
	// or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	OldestTime *time.Time
	// Specifies the order in which the returned results are displayed.
	Order *string
	// Filters the returned results by the specified list of payment types used for the transactions.
	PaymentTypes *[]string
	// Filters the returned results by the specified list of final statuses of the transactions.
	Statuses *[]string
	// Retrieves the transaction resource with the specified transaction code.
	TransactionCode *string
	// Filters the returned results by the specified list of transaction types.
	Types *[]string
	// Filters the returned results by user email.
	Users *[]string
}

// QueryValues converts [ListTransactionsV21Params] into [url.Values].
func (p *ListTransactionsV21Params) QueryValues() url.Values {
	q := make(url.Values)

	if p.ChangesSince != nil {
		q.Set("changes_since", p.ChangesSince.Format(time.RFC3339))
	}

	if p.Limit != nil {
		q.Set("limit", strconv.Itoa(*p.Limit))
	}

	if p.NewestRef != nil {
		q.Set("newest_ref", *p.NewestRef)
	}

	if p.NewestTime != nil {
		q.Set("newest_time", p.NewestTime.Format(time.RFC3339))
	}

	if p.OldestRef != nil {
		q.Set("oldest_ref", *p.OldestRef)
	}

	if p.OldestTime != nil {
		q.Set("oldest_time", p.OldestTime.Format(time.RFC3339))
	}

	if p.Order != nil {
		q.Set("order", *p.Order)
	}

	if p.PaymentTypes != nil {
		for _, v := range *p.PaymentTypes {
			q.Add("payment_types", v)
		}
	}

	if p.Statuses != nil {
		for _, v := range *p.Statuses {
			q.Add("statuses", v)
		}
	}

	if p.TransactionCode != nil {
		q.Set("transaction_code", *p.TransactionCode)
	}

	if p.Types != nil {
		for _, v := range *p.Types {
			q.Add("types", v)
		}
	}

	if p.Users != nil {
		for _, v := range *p.Users {
			q.Add("users", v)
		}
	}

	return q
}

// GetTransactionV21Params: query parameters for GetTransactionV2.1
type GetTransactionV21Params struct {
	// Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).
	Id *string
	// Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter in
	// the transaction resource).
	InternalId *string
	// Retrieves the transaction resource with the specified transaction code.
	TransactionCode *string
}

// QueryValues converts [GetTransactionV21Params] into [url.Values].
func (p *GetTransactionV21Params) QueryValues() url.Values {
	q := make(url.Values)

	if p.Id != nil {
		q.Set("id", *p.Id)
	}

	if p.InternalId != nil {
		q.Set("internal_id", *p.InternalId)
	}

	if p.TransactionCode != nil {
		q.Set("transaction_code", *p.TransactionCode)
	}

	return q
}

// ListTransactions200Response is a schema definition.
type ListTransactions200Response struct {
	Items *[]TransactionHistory `json:"items,omitempty"`
	Links *[]Link               `json:"links,omitempty"`
}

// ListTransactionsV21200Response is a schema definition.
type ListTransactionsV21200Response struct {
	Items *[]TransactionHistory `json:"items,omitempty"`
	Links *[]Link               `json:"links,omitempty"`
}

// RefundTransaction204Response is a schema definition.
type RefundTransaction204Response struct {
}

type TransactionsService struct {
	c *client.Client
}

func NewTransactionsService(c *client.Client) *TransactionsService {
	return &TransactionsService{c: c}
}

// ListDeprecated: List transactions
// Lists detailed history of all transactions associated with the merchant profile.
func (s *TransactionsService) ListDeprecated(ctx context.Context, params ListTransactionsParams) (*ListTransactions200Response, error) {
	path := fmt.Sprintf("/v0.1/me/transactions/history")

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v ListTransactions200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// GetDeprecated: Retrieve a transaction
// Retrieves the full details of an identified transaction. The transaction resource is identified by a query
// parameter and *one* of following parameters is required:
//   - `id`
//   - `internal_id`
//   - `transaction_code`
//   - `foreign_transaction_id`
//   - `client_transaction_id`
func (s *TransactionsService) GetDeprecated(ctx context.Context, params GetTransactionParams) (*TransactionFull, error) {
	path := fmt.Sprintf("/v0.1/me/transactions")

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v TransactionFull
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusNotFound:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// List: List transactions
// Lists detailed history of all transactions associated with the merchant profile.
func (s *TransactionsService) List(ctx context.Context, merchantCode string, params ListTransactionsV21Params) (*ListTransactionsV21200Response, error) {
	path := fmt.Sprintf("/v2.1/merchants/%v/transactions/history", merchantCode)

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v ListTransactionsV21200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Get: Retrieve a transaction
// Retrieves the full details of an identified transaction. The transaction resource is identified by a query
// parameter and *one* of following parameters is required:
//   - `id`
//   - `internal_id`
//   - `transaction_code`
//   - `foreign_transaction_id`
//   - `client_transaction_id`
func (s *TransactionsService) Get(ctx context.Context, merchantCode string, params GetTransactionV21Params) (*TransactionFull, error) {
	path := fmt.Sprintf("/v2.1/merchants/%v/transactions", merchantCode)

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v TransactionFull
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusNotFound:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Refund: Refund a transaction
// Refunds an identified transaction either in full or partially.
func (s *TransactionsService) Refund(ctx context.Context, txnId string, body RefundTransactionBody) (*RefundTransaction204Response, error) {
	path := fmt.Sprintf("/v0.1/me/refund/%v", txnId)

	resp, err := s.c.Call(ctx, http.MethodPost, path, client.WithJSONBody(body))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusNoContent:
		var v RefundTransaction204Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusNotFound:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusConflict:
		var apiErr shared.Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}
