// Code generated by `go-sdk-gen`. DO NOT EDIT.
package sumup

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// Account: Profile information.
type Account struct {
	// The role of the user.
	Type *AccountType `json:"type,omitempty"`
	// Username of the user profile.
	Username *string `json:"username,omitempty"`
}

// AccountType: The role of the user.
type AccountType string

const (
	AccountTypeNormal   AccountType = "normal"
	AccountTypeOperator AccountType = "operator"
)

// AddressWithDetails: Details of the registered address.
type AddressWithDetails struct {
	// Address line 1
	AddressLine1 *string `json:"address_line_1,omitempty"`
	// Address line 2
	AddressLine2 *string `json:"address_line_2,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// undefined
	Company *string `json:"company,omitempty"`
	// Country ISO 3166-1 code
	Country *string `json:"country,omitempty"`
	// Country Details
	CountryDetails *CountryDetails `json:"country_details,omitempty"`
	// undefined
	FirstName *string `json:"first_name,omitempty"`
	// Landline number
	Landline *string `json:"landline,omitempty"`
	// undefined
	LastName *string `json:"last_name,omitempty"`
	// Postal code
	PostCode *string `json:"post_code,omitempty"`
	// Region code
	RegionCode *string `json:"region_code,omitempty"`
	// Country region id
	RegionId *float64 `json:"region_id,omitempty"`
	// Region name
	RegionName *string `json:"region_name,omitempty"`
	// undefined
	StateId *string `json:"state_id,omitempty"`
	// TimeOffset Details
	TimeoffsetDetails *TimeoffsetDetails `json:"timeoffset_details,omitempty"`
}

// AppSettings: Mobile app settings
type AppSettings struct {
	// Advanced mode.
	AdvancedMode *string `json:"advanced_mode,omitempty"`
	// Barcode scanner.
	BarcodeScanner *string `json:"barcode_scanner,omitempty"`
	// Cash payment.
	CashPayment *string `json:"cash_payment,omitempty"`
	// Checkout preference
	CheckoutPreference *string `json:"checkout_preference,omitempty"`
	// Expected max transaction amount.
	ExpectedMaxTransactionAmount *float64 `json:"expected_max_transaction_amount,omitempty"`
	// Include vat.
	IncludeVat *bool `json:"include_vat,omitempty"`
	// Manual entry.
	ManualEntry *string `json:"manual_entry,omitempty"`
	// Manual entry tutorial.
	ManualEntryTutorial *bool `json:"manual_entry_tutorial,omitempty"`
	// Mobile payment.
	MobilePayment *string `json:"mobile_payment,omitempty"`
	// Mobile payment tutorial.
	MobilePaymentTutorial *bool `json:"mobile_payment_tutorial,omitempty"`
	// Reader payment.
	ReaderPayment *string `json:"reader_payment,omitempty"`
	// Referral.
	Referral *string `json:"referral,omitempty"`
	// Tax enabled.
	TaxEnabled *bool `json:"tax_enabled,omitempty"`
	// Terminal mode tutorial.
	TerminalModeTutorial *bool `json:"terminal_mode_tutorial,omitempty"`
	// Tip rates.
	TipRates *[]float64 `json:"tip_rates,omitempty"`
	// Tipping.
	Tipping *string `json:"tipping,omitempty"`
}

// BankAccount is a schema definition.
type BankAccount struct {
	// Account category - business or personal
	AccountCategory   *string `json:"account_category,omitempty"`
	AccountHolderName *string `json:"account_holder_name,omitempty"`
	// Account number
	AccountNumber *string `json:"account_number,omitempty"`
	// Type of the account
	AccountType *string `json:"account_type,omitempty"`
	// Bank code
	BankCode *string `json:"bank_code,omitempty"`
	// Bank name
	BankName *string `json:"bank_name,omitempty"`
	// Branch code
	BranchCode *string `json:"branch_code,omitempty"`
	// Creation date of the bank account
	CreatedAt *string `json:"created_at,omitempty"`
	// IBAN
	Iban *string `json:"iban,omitempty"`
	// The primary bank account is the one used for payouts
	Primary *bool `json:"primary,omitempty"`
	// Status in the verification process
	Status *string `json:"status,omitempty"`
	// SWIFT code
	Swift *string `json:"swift,omitempty"`
}

// BusinessOwner is a schema definition.
type BusinessOwner struct {
	// Date of birth
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	// BO's first name
	FirstName *string `json:"first_name,omitempty"`
	// BO's Landline
	Landline *string `json:"landline,omitempty"`
	// BO's last name of the user
	LastName *string `json:"last_name,omitempty"`
	// Mobile phone number
	MobilePhone *string `json:"mobile_phone,omitempty"`
	// Ownership percentage
	Ownership *float64 `json:"ownership,omitempty"`
}

// BusinessOwners: Business owners information.
type BusinessOwners []BusinessOwner

// CountryDetails: Country Details
type CountryDetails struct {
	// Currency ISO 4217 code
	Currency *string `json:"currency,omitempty"`
	// Country EN name
	EnName *string `json:"en_name,omitempty"`
	// Country ISO code
	IsoCode *string `json:"iso_code,omitempty"`
	// Country native name
	NativeName *string `json:"native_name,omitempty"`
}

// DoingBusinessAs: Doing Business As information
type DoingBusinessAs struct {
	Address *DoingBusinessAsAddress `json:"address,omitempty"`
	// Doing business as name
	BusinessName *string `json:"business_name,omitempty"`
	// Doing business as company registration number
	CompanyRegistrationNumber *string `json:"company_registration_number,omitempty"`
	// Doing business as email
	Email *string `json:"email,omitempty"`
	// Doing business as VAT ID
	VatId *string `json:"vat_id,omitempty"`
	// Doing business as website
	Website *string `json:"website,omitempty"`
}

// DoingBusinessAsAddress is a schema definition.
type DoingBusinessAsAddress struct {
	// Address line 1
	AddressLine1 *string `json:"address_line_1,omitempty"`
	// Address line 2
	AddressLine2 *string `json:"address_line_2,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// Country ISO 3166-1 code
	Country *string `json:"country,omitempty"`
	// Postal code
	PostCode *string `json:"post_code,omitempty"`
	// Country region ID
	RegionId *float64 `json:"region_id,omitempty"`
	// Country region name
	RegionName *string `json:"region_name,omitempty"`
}

// LegalType: Id of the legal type of the merchant profile
type LegalType struct {
	// Legal type short description
	Description *string `json:"description,omitempty"`
	// Legal type description
	FullDescription *string `json:"full_description,omitempty"`
	// Unique id
	Id *float64 `json:"id,omitempty"`
	// Sole trader legal type if true
	SoleTrader *bool `json:"sole_trader,omitempty"`
}

// MerchantAccount: Details of the merchant account.
type MerchantAccount struct {
	// Profile information.
	Account *Account `json:"account,omitempty"`
	// Mobile app settings
	AppSettings *AppSettings `json:"app_settings,omitempty"`
	// Merchant comes from payleven BR migration
	IsMigratedPaylevenBr *bool `json:"is_migrated_payleven_br,omitempty"`
	// Account's merchant profile
	MerchantProfile *MerchantProfile `json:"merchant_profile,omitempty"`
	// User permissions
	Permissions *Permissions `json:"permissions,omitempty"`
	// Account's personal profile.
	PersonalProfile *PersonalProfile `json:"personal_profile,omitempty"`
}

// MerchantProfile: Account's merchant profile
type MerchantProfile struct {
	// Details of the registered address.
	Address      *AddressWithDetails `json:"address,omitempty"`
	BankAccounts *[]BankAccount      `json:"bank_accounts,omitempty"`
	// Business owners information.
	BusinessOwners *BusinessOwners `json:"business_owners,omitempty"`
	// Company name
	CompanyName *string `json:"company_name,omitempty"`
	// Company registration number
	CompanyRegistrationNumber *string `json:"company_registration_number,omitempty"`
	// Merchant country code formatted according to [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) &#40;for
	// internal usage only&#41;
	Country *string `json:"country,omitempty"`
	// Doing Business As information
	DoingBusinessAs *DoingBusinessAs `json:"doing_business_as,omitempty"`
	// True if the merchant is extdev
	Extdev *bool `json:"extdev,omitempty"`
	// Id of the legal type of the merchant profile
	LegalType *LegalType `json:"legal_type,omitempty"`
	// Merchant locale &#40;for internal usage only&#41;
	Locale *string `json:"locale,omitempty"`
	// Merchant category code
	MerchantCategoryCode *string `json:"merchant_category_code,omitempty"`
	// Unique identifying code of the merchant profile
	MerchantCode *string `json:"merchant_code,omitempty"`
	// Mobile phone number
	MobilePhone *string `json:"mobile_phone,omitempty"`
	// Nature and purpose of the business
	NatureAndPurpose *string `json:"nature_and_purpose,omitempty"`
	// True if the payout zone of this merchant is migrated
	PayoutZoneMigrated *bool `json:"payout_zone_migrated,omitempty"`
	// Permanent certificate access code &#40;Portugal&#41;
	PermanentCertificateAccessCode *string `json:"permanent_certificate_access_code,omitempty"`
	// Merchant settings &#40;like \"payout_type\", \"payout_period\"&#41;
	Settings *MerchantSettings `json:"settings,omitempty"`
	// Vat ID
	VatId *string `json:"vat_id,omitempty"`
	// Merchant VAT rates
	VatRates *VatRates `json:"vat_rates,omitempty"`
	// Website
	Website *string `json:"website,omitempty"`
}

// MerchantSettings: Merchant settings &#40;like \"payout_type\", \"payout_period\"&#41;
type MerchantSettings struct {
	// Whether merchant will receive daily payout emails
	DailyPayoutEmail *bool `json:"daily_payout_email,omitempty"`
	// Whether merchant has gross settlement enabled
	GrossSettlement *bool `json:"gross_settlement,omitempty"`
	// Whether merchant will receive monthly payout emails
	MonthlyPayoutEmail *bool `json:"monthly_payout_email,omitempty"`
	// Whether merchant can make MOTO payments
	MotoPayment *MerchantSettingsMotoPayment `json:"moto_payment,omitempty"`
	// Payout Instrument
	PayoutInstrument *string `json:"payout_instrument,omitempty"`
	// Whether merchant will receive payouts on demand
	PayoutOnDemand *bool `json:"payout_on_demand,omitempty"`
	// Whether merchant can edit payouts on demand
	PayoutOnDemandAvailable *bool `json:"payout_on_demand_available,omitempty"`
	// Payout frequency
	PayoutPeriod *string `json:"payout_period,omitempty"`
	// Payout type
	PayoutType *string `json:"payout_type,omitempty"`
	// Whether to show printers in mobile app
	PrintersEnabled *bool `json:"printers_enabled,omitempty"`
	// Stone merchant code
	StoneMerchantCode *string `json:"stone_merchant_code,omitempty"`
	// Whether to show tax in receipts &#40;saved per transaction&#41;
	TaxEnabled *bool `json:"tax_enabled,omitempty"`
}

// MerchantSettingsMotoPayment: Whether merchant can make MOTO payments
type MerchantSettingsMotoPayment string

const (
	MerchantSettingsMotoPaymentEnforced    MerchantSettingsMotoPayment = "ENFORCED"
	MerchantSettingsMotoPaymentOff         MerchantSettingsMotoPayment = "OFF"
	MerchantSettingsMotoPaymentOn          MerchantSettingsMotoPayment = "ON"
	MerchantSettingsMotoPaymentUnavailable MerchantSettingsMotoPayment = "UNAVAILABLE"
)

// Permissions: User permissions
type Permissions struct {
	// Create MOTO payments
	CreateMotoPayments *bool `json:"create_moto_payments,omitempty"`
	// Create referral
	CreateReferral *bool `json:"create_referral,omitempty"`
	// Can view full merchant transaction history
	FullTransactionHistoryView *bool `json:"full_transaction_history_view,omitempty"`
	// Refund transactions
	RefundTransactions *bool `json:"refund_transactions,omitempty"`
}

// PersonalProfile: Account's personal profile.
type PersonalProfile struct {
	// Details of the registered address.
	Address  *AddressWithDetails `json:"address,omitempty"`
	Complete *bool               `json:"complete,omitempty"`
	// Date of birth
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	// First name of the user
	FirstName *string `json:"first_name,omitempty"`
	// Last name of the user
	LastName *string `json:"last_name,omitempty"`
	// Mobile phone number
	MobilePhone *string `json:"mobile_phone,omitempty"`
}

// TimeoffsetDetails: TimeOffset Details
type TimeoffsetDetails struct {
	// Daylight Saving Time
	Dst *bool `json:"dst,omitempty"`
	// UTC offset
	Offset *float64 `json:"offset,omitempty"`
	// Postal code
	PostCode *string `json:"post_code,omitempty"`
}

// VatRates: Merchant VAT rates
type VatRates struct {
	// Country ISO code
	Country *string `json:"country,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// Internal ID
	Id *float64 `json:"id,omitempty"`
	// Ordering
	Ordering *float64 `json:"ordering,omitempty"`
	// Rate
	Rate *float64 `json:"rate,omitempty"`
}

// ListBankAccountsParams: query parameters for ListBankAccounts
type ListBankAccountsParams struct {
	// If true only the primary bank account (the one used for payouts) will be returned.
	Primary *bool
}

// QueryValues converts [ListBankAccountsParams] into [url.Values].
func (p *ListBankAccountsParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Primary != nil {
		q.Set("primary", strconv.FormatBool(*p.Primary))
	}

	return q
}

// GetAccountParams: query parameters for GetAccount
type GetAccountParams struct {
	// A list of additional information you want to receive for the user. By default only personal and merchant profile
	// information will be returned.
	Include *[]string
}

// QueryValues converts [GetAccountParams] into [url.Values].
func (p *GetAccountParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Include != nil {
		for _, v := range *p.Include {
			q.Add("include[]", v)
		}
	}

	return q
}

// ListBankAccountsV11Params: query parameters for ListBankAccountsV11
type ListBankAccountsV11Params struct {
	// If true only the primary bank account (the one used for payouts) will be returned.
	Primary *bool
}

// QueryValues converts [ListBankAccountsV11Params] into [url.Values].
func (p *ListBankAccountsV11Params) QueryValues() url.Values {
	q := make(url.Values)

	if p.Primary != nil {
		q.Set("primary", strconv.FormatBool(*p.Primary))
	}

	return q
}

// ListBankAccounts200Response is a schema definition.
type ListBankAccounts200Response []BankAccount

// ListBankAccountsV11200Response is a schema definition.
type ListBankAccountsV11200Response []BankAccount

type MerchantService service

// GetPersonalProfile: Retrieve a personal profile
// Retrieves personal profile data.
func (s *MerchantService) GetPersonalProfile(ctx context.Context) (*PersonalProfile, error) {
	path := fmt.Sprintf("/v0.1/me/personal-profile")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v PersonalProfile
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// GetSettings: Get settings
// Retrieves merchant settings.
func (s *MerchantService) GetSettings(ctx context.Context) (*MerchantSettings, error) {
	path := fmt.Sprintf("/v0.1/me/merchant-profile/settings")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v MerchantSettings
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusForbidden:
		var apiErr ErrorForbidden
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// GetDoingBusinessAs: Retrieve DBA
// Retrieves Doing Business As profile.
func (s *MerchantService) GetDoingBusinessAs(ctx context.Context) (*DoingBusinessAs, error) {
	path := fmt.Sprintf("/v0.1/me/merchant-profile/doing-business-as")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v DoingBusinessAs
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// ListBankAccountsDeprecated: List bank accounts
// Retrieves bank accounts of the merchant.
func (s *MerchantService) ListBankAccountsDeprecated(ctx context.Context, params ListBankAccountsParams) (*ListBankAccounts200Response, error) {
	path := fmt.Sprintf("/v0.1/me/merchant-profile/bank-accounts")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	req.URL.RawQuery = params.QueryValues().Encode()

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v ListBankAccounts200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusForbidden:
		var apiErr ErrorForbidden
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// GetMerchantProfile: Retrieve a merchant profile
// Retrieves merchant profile data.
func (s *MerchantService) GetMerchantProfile(ctx context.Context) (*MerchantProfile, error) {
	path := fmt.Sprintf("/v0.1/me/merchant-profile")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v MerchantProfile
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusForbidden:
		var apiErr ErrorForbidden
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Get: Retrieve a profile
// Returns user profile information.
func (s *MerchantService) Get(ctx context.Context, params GetAccountParams) (*MerchantAccount, error) {
	path := fmt.Sprintf("/v0.1/me")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	req.URL.RawQuery = params.QueryValues().Encode()

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v MerchantAccount
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// ListBankAccounts: List bank accounts
// Retrieves bank accounts of the merchant.
func (s *MerchantService) ListBankAccounts(ctx context.Context, merchantCode string, params ListBankAccountsV11Params) (*ListBankAccountsV11200Response, error) {
	path := fmt.Sprintf("/v1.1/merchants/%v/bank-accounts", merchantCode)

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	req.URL.RawQuery = params.QueryValues().Encode()

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v ListBankAccountsV11200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusUnauthorized:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	case http.StatusForbidden:
		var apiErr ErrorForbidden
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}
