// Code generated by `go-sdk-gen`. DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

const (
	version = "0.0.1" // x-release-please-version

	// APIUrl is the URL of our API.
	APIUrl = "https://api.sumup.com"
)

type client interface {
	NewRequest(ctx context.Context, method, path string, body io.Reader) (*http.Request, error)
	Do(req *http.Request) (*http.Response, error)
}

type Client struct {
	// client is the HTTP client used to communicate with the API.
	client *http.Client
	// url is the url of the API the requests will be sent to.
	url string
	// userAgent is the user-agent header that will be sent with
	// every request.
	userAgent string
	// key is the API key or access token used for authorization.
	key string
}

// ClientOption is an option for the SumUp API client.
type ClientOption func(c *Client) error

// New creates new HTTP API client.
// The client is by default configured with environment variables (e.g. `SUMUP_API_KEY`).
// To override the default configuration use [ClientOption]s.
func New(opts ...ClientOption) *Client {
	c := &Client{
		client:    http.DefaultClient,
		userAgent: fmt.Sprintf("sumup/%s", version),
		url:       APIUrl,
		key:       os.Getenv("SUMUP_API_KEY"),
	}

	for _, o := range opts {
		o(c)
	}

	return c
}

// WithAPIKey returns a [ClientOption] that configures the client with an API key for authorization.
func (c *Client) WithAPIKey(key string) ClientOption {
	return func(c *Client) error {
		c.key = key
		return nil
	}
}

// WithClient returns a [ClientOption] that configures the client to use a specific http client
// for underlying requests.
func (c *Client) WithHTTPClient(client *http.Client) ClientOption {
	return func(c *Client) error {
		c.client = client
		return nil
	}
}

type request struct {
	httpClient *http.Client
	req        *http.Request
}

// Call executes a SumUp API call. Use [RequestOption]s to configure the request.
func (c *Client) Call(
	ctx context.Context, method, path string, opts ...RequestOption,
) (*http.Response, error) {
	req, err := c.NewRequest(ctx, method, path, http.NoBody)
	if err != nil {
		return nil, err
	}

	r := &request{
		req:        req,
		httpClient: c.client,
	}

	for _, o := range opts {
		if err := o(r); err != nil {
			return nil, err
		}
	}

	resp, err := r.httpClient.Do(r.req)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// NewRequest returns a new [http.Request] given a method, URL, and
// optional body.
//
// NewRequest returns a Request suitable for use with
// [Client.Do].
func (c *Client) NewRequest(
	ctx context.Context, method, path string, body io.Reader,
) (*http.Request, error) {
	if !strings.HasPrefix(path, "/") {
		path = "/" + path
	}

	req, err := http.NewRequestWithContext(
		ctx,
		method,
		c.url+path,
		body,
	)
	if err != nil {
		return nil, fmt.Errorf("build request: %s", err.Error())
	}

	req.Header.Add("Authorization", "Bearer "+c.key)
	req.Header.Add("SumUp-Version", version)
	req.Header.Add("User-Agent", c.userAgent)

	return req, nil
}

// Do sends an HTTP request and returns an HTTP response, following
// policy (such as redirects, cookies, auth) as configured on the
// HTTP client.
func (c *Client) Do(req *http.Request) (*http.Response, error) {
	resp, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// RequestOption is an option for the request made by the SumUp [Client].
type RequestOption func(req *request) error

// WithHTTPClient returns a [RequestOption] that overrides the underlying [http.Client]
// of the service used to make the request.
func WithHTTPClient(client *http.Client) RequestOption {
	return func(r *request) error {
		r.httpClient = client
		return nil
	}
}

// WithHeader returns a [RequestOption] that sets a header key-value pair.
// Any previously set value will be overwritten.
func WithHeader(key, value string) RequestOption {
	return func(r *request) error {
		r.req.Header.Set(key, value)
		return nil
	}
}

// WithBody returns a [RequestOption] that sets the request body as a JSON of the value v.
func WithJSONBody(v any) RequestOption {
	return func(r *request) error {
		buf := new(bytes.Buffer)
		if err := json.NewEncoder(buf).Encode(v); err != nil {
			return fmt.Errorf("encode json request body: %v", err)
		}

		r.req.Body = io.NopCloser(buf)
		r.req.Header.Set("Content-Type", "application/json")
		return nil
	}
}

// WithQueryValues returns a [RequestOption] that sets the request query params.
func WithQueryValues(q url.Values) RequestOption {
	return func(r *request) error {
		r.req.URL.RawQuery = q.Encode()
		return nil
	}
}
