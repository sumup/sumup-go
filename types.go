// Code generated by `gogenitor`. DO NOT EDIT.
package sumup

import (
	"encoding/json"
	"time"
)

type Date struct{ time.Time }

const jsonDateFormat = `"` + time.DateOnly + `"`

var _ json.Unmarshaler = (*Date)(nil)

func (t *Date) UnmarshalJSON(b []byte) (err error) {
	date, err := time.Parse(jsonDateFormat, string(b))
	if err != nil {
		return err
	}
	t.Time = date
	return
}

var _ json.Marshaler = (*Date)(nil)

func (t Date) MarshalJSON() ([]byte, error) {
	return []byte(t.Time.Format(jsonDateFormat)), nil
}

type Time struct{ time.Time }

const jsonTimeFormat = `"` + time.TimeOnly + `"`

var _ json.Unmarshaler = (*Time)(nil)

func (t *Time) UnmarshalJSON(b []byte) (err error) {
	date, err := time.Parse(jsonTimeFormat, string(b))
	if err != nil {
		return err
	}
	t.Time = date
	return
}

var _ json.Marshaler = (*Time)(nil)

func (t Time) MarshalJSON() ([]byte, error) {
	return []byte(t.Time.Format(jsonTimeFormat)), nil
}
