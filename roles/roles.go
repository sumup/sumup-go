// Code generated by `go-sdk-gen`. DO NOT EDIT.

package roles

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/sumup/sumup-go/client"
	"github.com/sumup/sumup-go/shared"
)

// Role: A custom role that can be used to assign set of permissions to members.
type Role struct {
	// The timestamp of when the role was created.
	CreatedAt time.Time `json:"created_at"`
	// User-defined description of the role.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the role.
	Id string `json:"id"`
	// True if the role is provided by SumUp.
	IsPredefined bool `json:"is_predefined"`
	// Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, always
	// submit whole metadata.
	Metadata *shared.Metadata `json:"metadata,omitempty"`
	// User-defined name of the role.
	Name string `json:"name"`
	// List of permission granted by this role.
	// Max items: 100
	Permissions []string `json:"permissions"`
	// The timestamp of when the role was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// CreateMerchantRoleBody is a schema definition.
type CreateMerchantRoleBody struct {
	// User-defined description of the role.
	Description *string `json:"description,omitempty"`
	// Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, always
	// submit whole metadata.
	Metadata *shared.Metadata `json:"metadata,omitempty"`
	// User-defined name of the role.
	Name string `json:"name"`
	// User's permissions.
	// Max items: 100
	Permissions []string `json:"permissions"`
}

// UpdateMerchantRoleBody is a schema definition.
type UpdateMerchantRoleBody struct {
	// User-defined description of the role.
	Description *string `json:"description,omitempty"`
	// User-defined name of the role.
	Name *string `json:"name,omitempty"`
	// User's permissions.
	// Max items: 100
	Permissions *[]string `json:"permissions,omitempty"`
}

// ListMerchantRoles200Response is a schema definition.
type ListMerchantRoles200Response struct {
	Items []Role `json:"items"`
}

type RolesService struct {
	c *client.Client
}

func NewRolesService(c *client.Client) *RolesService {
	return &RolesService{c: c}
}

// List: List roles
// List merchant's custom roles.
func (s *RolesService) List(ctx context.Context, merchantCode string) (*ListMerchantRoles200Response, error) {
	path := fmt.Sprintf("/v0.1/merchants/%v/roles", merchantCode)

	resp, err := s.c.Call(ctx, http.MethodGet, path)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v ListMerchantRoles200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusNotFound:
		return nil, errors.New("Merchant not found.")
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Create: Create a role
// Create a custom role for the merchant. Roles are defined by the set of permissions that they grant to the
// members that they are assigned to.
func (s *RolesService) Create(ctx context.Context, merchantCode string, body CreateMerchantRoleBody) (*Role, error) {
	path := fmt.Sprintf("/v0.1/merchants/%v/roles", merchantCode)

	resp, err := s.c.Call(ctx, http.MethodPost, path, client.WithJSONBody(body))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusCreated:
		var v Role
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusBadRequest:
		return nil, errors.New("Invalid request.")
	case http.StatusNotFound:
		return nil, errors.New("Merchant not found.")
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Delete: Delete a role
// Delete a custom role.
func (s *RolesService) Delete(ctx context.Context, merchantCode string, roleId string) error {
	path := fmt.Sprintf("/v0.1/merchants/%v/roles/%v", merchantCode, roleId)

	resp, err := s.c.Call(ctx, http.MethodDelete, path)
	if err != nil {
		return fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		return nil
	case http.StatusBadRequest:
		return errors.New("Invalid request.")
	case http.StatusNotFound:
		return errors.New("Merchant not found.")
	default:
		return fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Get: Retrieve a role
// Retrieve a custom role by ID.
func (s *RolesService) Get(ctx context.Context, merchantCode string, roleId string) (*Role, error) {
	path := fmt.Sprintf("/v0.1/merchants/%v/roles/%v", merchantCode, roleId)

	resp, err := s.c.Call(ctx, http.MethodGet, path)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v Role
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusNotFound:
		return nil, errors.New("Merchant or role not found.")
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// Update: Update a role
// Update a custom role.
func (s *RolesService) Update(ctx context.Context, merchantCode string, roleId string, body UpdateMerchantRoleBody) (*Role, error) {
	path := fmt.Sprintf("/v0.1/merchants/%v/roles/%v", merchantCode, roleId)

	resp, err := s.c.Call(ctx, http.MethodPatch, path, client.WithJSONBody(body))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v Role
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	case http.StatusBadRequest:
		return nil, errors.New("Invalid request.")
	case http.StatusNotFound:
		return nil, errors.New("Merchant not found.")
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}
